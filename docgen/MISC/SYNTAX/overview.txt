########################
An overview of ATS
########################

ATS is a programming language equipped with an advanced type system in
which dependent types (based on predicate logic) and linear types
(based on Girard's linear logic) are supported. The core of ATS
consists of an ML-like functional programming language, which is
call-by-value and allows effects (such as references and exceptions).

The dependent types in ATS are of DML-style, which are fundamentally
different from those formulated by Martin-Lof in his attempt to
establish a type-theoretic foundation for mathematics.  Note that DML
refers to Dependent ML, a dependently typed programming language that
is now regarded as the predecessor of ATS.

ATS is stratified. In ATS, there are both a static component (statics)
and a dynamic component (dynamics), containing static terms and dynamic
terms, respectively. In the following presentation, I may also use 'term'
and 'expression' interchangeably.

While types are static terms, not all the static terms are types.
And sorts are introduced to classify static terms. For instance, some
of the commonly used built-in sorts in ATS are listed as follows: int,
bool, type, vtype, prop, and view. The sorts int and bool are
predicative while the sorts type, vtype, prop and view are impredicative.

############ end of [overview.txt] ############

