########################
Syntax for fixity declarations
########################

ATS3 supports prefix, infix, and postfix operators.
For instance, the following expression involving infix
and prefix operators is accepted in ATS3:

-2*x**2 + 10*x - 100

which represents

negative 2 times x squared plus 10 times x minus 100

Note that the minus sign is used as a prefix operator
and also an infix one. In ATS2, ~ is for unary minus and
- for binary minus, often causing confusion for beginners!

The following fixity-declaration attaches the prefix-status
and postfix-status to the symbols foo1 and bar1, respectively:

#prefix foo1
#postfix bar1

The following fixity-declaration attaches the infix-status to the
symbols foo2 and bar2:

#infix0 foo2 bar2

The following fixity-declaration attaches the infixl-status to the
symbols foo3 and bar3:

#infixl foo3 bar3

If the expression:

(exp1 foo3 exp2 bar3 exp3)

is written, then it is treated like the expression:

((exp1 foo3 exp2) bar3 exp3)

For instance, common arithmetic operators +, -, *, and / are given
the infixl-status.

The following fixity-declaration attaches the infixr-status to the
symbols foo4 and bar4:

#infixr foo4 bar4

If the expression:

(exp1 foo4 exp2 bar4 exp3)

is written, then it is treated like the expression

(exp1 foo4 (exp2 bar4 exp3))

For instance, the function type constructor -> is assigned the
infixr-status.

One can also use the nonfix-declaration to strip off any fixity status
attached to an operator. For instance, if we do:

#nonfix foo1 bar1

then foo1 is no longer a prefix operator (and bar1 is no longer a
postifx operator). If one only wants to strip off the fixity status
for a particular occurrence of an operator, the keyword op can be
used. For instance, we can write op+(1, 2) for 1 + 2 and op(foo2)(1,2)
for (1 foo2 2).

There is a special binary operator of the name app (for application),
which is assigned the infixl-status.  For instance, the expression:

fopr(exp1, exp2)(exp3)

is treated as something like

(fopr app (exp1, exp2)) app exp3

If an operator is assigned some fixity status, then it is also given a
precedence value (of some integer number). By default, this value is
0.  The precedence value of app is chosen to be 70. Assume that baz is
attached the infix-status.  The following expression:

fopr(exp1) baz exp2

is treated as (fopr(exp1)) bar2 exp2 if the precedence value of baz is
less than or equal to 70, and it is treated as fopr(exp1 bar2 exp2)
otherwise.

One can add a precedence value to a fixity-declaration. For instance,
the following declaration assigns the precedence value 71 to baz:

#infix0 baz of 71

And the following two declarations assign the precedence value 76 and
66 to baz2 and baz3, respectively:

#infixl baz2 of baz(+5) // the precedence value of baz plus 5
#infixr baz3 of baz(-5) // the precedence value of baz minus 5

The default fixity declarations for ATS3 are declared in the following
file:

https://github.com/githwxi/ATS-Xanadu/blob/master/prelude/fixity.sats

############ end of [fixity.txt] ############
